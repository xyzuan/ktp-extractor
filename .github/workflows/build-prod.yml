name: Deploy xyzuan-ktp-extractor Production Build

on:
  push:
    branches:
      - master

jobs:
  # sonarqube:
  #   name: Run Code Quality Check
  #   runs-on: ubuntu-latest
  #   if: success()
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: "Check code with SonarQube"
  #       uses: sonarsource/sonarqube-scan-action@v4
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  build:
    name: Build & Push to GHCR Registry
    runs-on: ubuntu-latest
    if: success()
    steps:
      # - name: Send Telegram Message on Build
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_TOKEN }}
      #     message: |
      #       ${{ github.actor }} triggered build:
      #       Last Commit message: ${{ github.event.commits[0].message }}

      #       Repository: ${{ github.repository }}

      #       See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Settle up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Declaring some Global Environtment vars
        run: |
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "SHA=$(echo "$GITHUB_SHA" | head -c 7)" >> $GITHUB_ENV
          echo "REGISTRY=ghcr.io/xyzuan" >> $GITHUB_ENV
          echo "IMAGE_NAME=xyzuan_ktp_extractor" >> $GITHUB_ENV
          echo "DOCKERFILE=misc/Dockerfile" >> $GITHUB_ENV

      - name: Authenticating to Eden Server realms.
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_PRIVATE_KEY }}

      - name: Authenticating to GHCR realms
        run: echo "${{ secrets.GH_TOKEN }}" | docker login -u "${{ github.actor }}" ghcr.io --password-stdin

      - name: Treaty Build the Docker image
        run: |
          docker build \
          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }} -f ${{ env.DOCKERFILE }} .

      - name: Adding tags to the Images
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.SHA}}

      - name: Bring the Images to GHCR
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.SHA}}

  serve:
    name: Serve Images in Server
    runs-on: ubuntu-latest
    needs: build
    if: success()
    steps:
      - name: Authenticating to Eden Server realms
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_PRIVATE_KEY }}

      - name: Declaring some Global Environtment vars
        run: |
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "CT_NAME=xyzuan-ktp-extractor" >> $GITHUB_ENV
          echo "REGISTRY=ghcr.io/xyzuan" >> $GITHUB_ENV
          echo "PORT=5000" >> $GITHUB_ENV
          echo "IMAGE_NAME=xyzuan_ktp_extractor" >> $GITHUB_ENV

      - name: Serve the Images
        run: |
          ssh-keyscan -t rsa ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          ssh ${{ github.actor }}@${{ secrets.SERVER_HOST }} << 'EOF'
          echo './nauzyxnet> Authenticating to GHCR realms...'
          echo "${{ secrets.GH_TOKEN }}" | docker login -u "${{ github.actor }}" ghcr.io --password-stdin

          echo './nauzyxnet> Pulling the latest image from GHCR...'
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}

          echo './nauzyxnet> Force Blowing the existing Docker Swarm Service...'
          docker service rm ${{ env.CT_NAME }}

          echo './nauzyxnet> Creating the Docker Swarm Service...'
          docker service create \
            --name ${{ env.CT_NAME }} \
            --replicas 1 \
            --with-registry-auth \
            --restart-condition any \
            --network nginx_swarm \
            --constraint node.role==manager \
            -e AZURE_ENDPOINT=${{ secrets.AZURE_ENDPOINT }} \
            -e AZURE_SUBSCRIPTION_KEY=${{ secrets.AZURE_SUBSCRIPTION_KEY }} \
            -p ${{ env.PORT }}:${{ env.PORT }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.BRANCH_NAME }}
          EOF
      # - name: Send Telegram Message Success Build
      #   uses: appleboy/telegram-action@master
      #   with:
      #     to: ${{ secrets.TELEGRAM_CHAT_ID }}
      #     token: ${{ secrets.TELEGRAM_TOKEN }}
      #     message: |
      #       Build Success,
      #       Last Commit message: ${{ github.event.commits[0].message }}

      #       Repository: ${{ github.repository }}

      #       See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}
